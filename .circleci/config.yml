# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  docker: circleci/docker@2.2.0

commands:
  setup-environment:
    description: Install libs for job
    steps:
      - run:
          name: Install awscli, gettext-base
          command: |
            sudo apt update
            sudo apt-get install awscli
            sudo apt-get install gettext-base
      - run:
          name: Install aws iam authen
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator \
              https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

jobs:
  setup-linting:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            #wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            #chmod +x /bin/hadolint
        
      - save_cache:
          paths:
          - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build-push-docker-image:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
      - run:
          name: Build docker image
          command: |
            docker build -t demo-app .
      - run:
          name: Push docker image
          command: |
            # Tag image
            export VERSION=$(<public)
            echo ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            docker tag demo-app ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            docker tag demo-app ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:lastest
            
            # Authen docker-hub
            docker login -u $DOCKER_HUB_ID -p $DOCKER_HUB_PASS
            
            # Publish two images with different version tags: 
            # - numbered version
            # - "latest"
            docker push ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            docker push ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:lastest

  deploy-green-env:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - setup-environment
      - run:
          name: Create kubectconfig to connect AWS EKS Cluster
          command: |
            aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_DEFAULT_REGION
      - run:
          name: Deploy green env
          command: |
            export VERSION=$(<public)
            export DOCKER_IMAGE=${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            export LABEL_VERSION=${VERSION//./-}
            
            echo "DOCKER_IMAGE: $DOCKER_IMAGE"
            echo "LABEL_VERSION: $LABEL_VERSION"
            
            envsubst < kubec/deployment.yaml | kubectl apply --filename -
            
            # Creates the demo-app-green service
            export APP_NAME=demo-app-green
            echo "APP_NAME: $APP_NAME"

            envsubst < kubec/service.yaml | kubectl apply --filename -
            sleep 3
            LOAD_BALANCER=$(kubectl get services \
              demo-app-green \
              --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "LOAD_BALANCER: $LOAD_BALANCER"

  deploy-blue-env:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - setup-environment
      - run:
          name: Create kubectconfig to connect AWS EKS Cluster
          command: |
            aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $CLUSTER_NAME
      - run:
          name: Target new version â€” new blue
          command: |
            export VERSION=$(<public)
            export LABEL_VERSION=${VERSION//./-}
            echo "LABEL_VERSION: $LABEL_VERSION"
            export APP_NAME=demo-app
            echo "APP_NAME: $APP_NAME"
            # demo-app service target now labeled new version
            envsubst < kubec/service.yaml | kubectl apply --filename -

  remove-old-env:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - setup-environment
      - run:
          name: Create kubectconfig to connect AWS EKS Cluster
          command: |
            aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $CLUSTER_NAME
      - run:
          name: Remove the old version demo-app
          command: |
            export VERSION=$(<public)
            export LABEL_VERSION=${VERSION//./-}
            echo "LABEL_VERSION: $LABEL_VERSION"
            
            # Remove the demo-app-x-x deployment
            for deploy in $(kubectl get deployments -o jsonpath="{.items[*].metadata.name}" | grep demo-app);
            do
              if [[ $deploy != demo-app-$LABEL_VERSION ]];
              then
                kubectl delete deployments $deploy
              fi
            done
            
            # Remove the demo-app-green service
            if kubectl get services | grep demo-app-green;
            then
              kubectl delete services demo-app-green
            fi

workflows:
  default:
    jobs:
      - setup-linting
      - build-push-docker-image:
          requires: [setup-linting]
      - deploy-green-env:
          requires: [build-push-docker-image]
      - hold:
          type: approval
          requires: [deploy-green-env]
      - deploy-blue-env:
          requires: [hold]
      - remove-old-env:
          requires: [deploy-blue-env]